@page "/User"
@using ApiContracts
@using BlazorApp.Services
@inject HttpUserService HttpUserService
@rendermode InteractiveServer
<PageTitle>User</PageTitle>

<!-- Creating a new user -->
<h3>Add New User</h3>
<div>
    <label>Enter Username:</label>
    <input @bind="username" placeholder="Enter username" />
</div>

<div style="margin-top: 10px;">
    <label>Enter Password:</label>
    <input type="password" @bind="password" placeholder="Enter password" />
</div>

<div style="margin-top: 10px;">
    <button class="btn btn-primary" @onclick="AddUser">Add User</button>
</div>

<p style="color: red">@errorMessage</p>
<p style="color: green" hidden="@(isSuccess == false)">User added successfully</p>

<!-- List of users and selection for editing or deleting -->
<h3>List of Users</h3>
<div>
    <label>Select a User:</label>
    <select @bind="selectedUserId">
        <option value="">-- Select a User --</option>
        @foreach (var user in users)
        {
            <option value="@user.Id">@user.UserName</option>
        }
    </select>
</div>

<!-- Edit and Delete buttons for selected user -->
<div style="margin-top: 10px;">
    <button class="btn btn-warning" @onclick="EditSelectedUser" disabled="@(!selectedUserId.HasValue)">Edit</button>
    <button class="btn btn-danger" @onclick="DeleteSelectedUser" disabled="@(!selectedUserId.HasValue)" style="margin-left: 10px;">Delete</button>
</div>

<!-- Edit User Section -->
@if (isEditing)
{
    <div style="margin-top: 20px;">
        <h3>Edit User</h3>
        <div>
            <label>Edit Username:</label>
            <input @bind="username" placeholder="Edit username" />
        </div>

        <div style="margin-top: 10px;">
            <label>Edit Password:</label>
            <input type="password" @bind="password" placeholder="Edit password" />
        </div>

        <div style="margin-top: 10px;">
            <button class="btn btn-success" @onclick="UpdateUser">Save Changes</button>
            <button class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
        </div>
    </div>
}

@code {
    private string username;
    private string password;
    private string errorMessage;
    private bool isSuccess;

    // List to hold users
    private List<UserDto> users = new();

    // Edit user properties
    private bool isEditing;
    private int? selectedUserId;
    private int editUserId;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task AddUser()
    {
        errorMessage = string.Empty;
        isSuccess = false;

        if (string.IsNullOrWhiteSpace(username) || string.IsNullOrWhiteSpace(password))
        {
            errorMessage = "Username and Password cannot be empty.";
            return;
        }

        try
        {
            var newUser = new CreateUserDto
            {
                UserName = username,
                Password = password
            };
            await HttpUserService.AddUserAsync(newUser);
            isSuccess = true;

            // Reload users after adding a new one
            await LoadUsers();
            username = password = string.Empty; // Clear input fields
        }
        catch (Exception e)
        {
            errorMessage = $"An error occurred: {e.Message}";
        }
    }

    private async Task LoadUsers()
    {
        try
        {
            users = (await HttpUserService.GetManyAsync()).ToList();
        }
        catch (Exception e)
        {
            errorMessage = $"Error loading users: {e.Message}";
        }
    }

    private void EditSelectedUser()
    {
        if (selectedUserId.HasValue)
        {
            var user = users.FirstOrDefault(u => u.Id == selectedUserId);
            if (user != null)
            {
                isEditing = true;
                editUserId = user.Id;
                username = user.UserName;
                password = string.Empty; // Empty password for security
            }
        }
    }

    private async Task UpdateUser()
    {
        try
        {
            var updatedUser = new UpdateUserDto
            {
                UserId = editUserId,
                UserName = username,
                Password = password
            };

            await HttpUserService.UpdateUserAsync(editUserId, updatedUser);

            // Refresh user list
            await LoadUsers();
            CancelEdit();
        }
        catch (Exception e)
        {
            errorMessage = $"Error updating user: {e.Message}";
        }
    }

    private void CancelEdit()
    {
        isEditing = false;
        editUserId = 0;
        username = string.Empty;
        password = string.Empty;
        selectedUserId = null;
    }

    private async Task DeleteSelectedUser()
    {
        if (selectedUserId.HasValue)
        {
            try
            {
                await HttpUserService.DeleteUserAsync(selectedUserId.Value);
                await LoadUsers();
                selectedUserId = null; // Reset selection after deletion
            }
            catch (Exception e)
            {
                errorMessage = $"Error deleting user: {e.Message}"; 
            }
        }
    }
}
