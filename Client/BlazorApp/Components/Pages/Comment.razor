@page "/Comment"
@attribute [Authorize]
@using System.Security.Claims
@using ApiContracts.Comment
@using BlazorApp.Services
@rendermode InteractiveServer
@inject HttpCommentService HttpCommentService
@inject HttpPostService HttpPostService
@inject HttpUserService HttpUserService

<PageTitle>Comments</PageTitle>

<!-- Adding a comment to a post -->
<h3>Add a Comment to a Post</h3>
<div>
    <label>Enter Comment:</label>
    <input @bind="content" placeholder="Write your comment here" />
</div>

<div style="margin-top: 10px;">
    <label>Enter Post ID:</label>
    <input @bind="postId" type="number" />
</div>

<div style="margin-top: 10px;">
    <button class="btn btn-primary" @onclick="AddComment">Add Comment</button>
</div>
<p style="color:red">@errorMessage</p>
<p style="color:green" hidden="@(isSuccess == false)">Comment added successfully!</p>

<!-- View Comments with Post and User Information -->
<h3>List of Comments</h3>
<ul>
    @foreach (var comment in comments)
    {
        <li>
            <b>Post ID:</b> @comment.PostId,
            <b>Post Author:</b> @(postAuthorsCache.TryGetValue(comment.PostId, out var authorName) ? authorName : "Loading...") <br />
            <b>Comment ID:</b> @comment.Id,
            <b>Content:</b> @comment.Content,
            <b>Commenter:</b> @(userNamesCache.TryGetValue(comment.UserId, out var userName) ? userName : "Loading...")
            <button class="btn btn-warning btn-sm" @onclick="() => EditComment(comment)">Edit</button>
            <button class="btn btn-danger btn-sm" @onclick="() => DeleteComment(comment.Id)">Delete</button>
        </li>
    }
</ul>

<!-- Edit Comment Section -->
@if (isEditing)
{
    <div>
        <h3>Edit Comment</h3>
        <div>
            <label>Edit Content:</label>
            <input @bind="editContent" placeholder="Edit your comment" />
        </div>
        <div style="margin-top: 10px;">
            <button class="btn btn-success" @onclick="UpdateComment">Save Changes</button>
            <button class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
        </div>
    </div>
}

@code {
    private string content;
    private int postId;
    private int userId;
    private string errorMessage;
    private bool isSuccess;
    [CascadingParameter] public Task<AuthenticationState> State { get; set; }

    // Properties for displaying and managing comments
    private List<CommentDto> comments = new();
    private bool isEditing;
    private int editCommentId;
    private string editContent;

    // Cache for storing user and author names
    private Dictionary<int, string> userNamesCache = new();
    private Dictionary<int, string> postAuthorsCache = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await State;
        var user = authState.User;

        if (user.Identity is null || !user.Identity.IsAuthenticated)
        {
            errorMessage = "You must be logged in to view or add comments.";
            return;
        }

        var userIdClaim = user.Claims.FirstOrDefault(c => c.Type == "Id");
        if (userIdClaim is null)
        {
            errorMessage = "Unable to retrieve user information.";
            return;
        }

        userId = int.Parse(userIdClaim.Value);

        await LoadComments();
        await PreloadAuthorAndUserNames();
    }

    private async Task AddComment()
    {
        errorMessage = string.Empty;
        isSuccess = false;

        if (string.IsNullOrWhiteSpace(content) || postId <= 0)
        {
            errorMessage = string.IsNullOrWhiteSpace(content)
                ? "Content cannot be empty."
                : "Post ID must be a positive number.";
            return;
        }

        try
        {
            var newComment = new CreateCommentDto
            {
                Content = content,
                PostId = postId,
                UserId = userId
            };
            await HttpCommentService.AddCommentAsync(newComment);
            isSuccess = true;

            // Reload comments after adding a new one
            await LoadComments();
            await PreloadAuthorAndUserNames();
            content = string.Empty; // Clear input
        }
        catch (Exception e)
        {
            errorMessage = $"An error occurred: {e.Message}";
        }
    }

    private async Task LoadComments()
    {
        try
        {
            comments = await HttpCommentService.GetManyAsync();
        }
        catch (Exception e)
        {
            errorMessage = $"Error loading comments: {e.Message}";
        }
    }

    private async Task PreloadAuthorAndUserNames()
    {
        foreach (var comment in comments)
        {
            if (!postAuthorsCache.ContainsKey(comment.PostId))
            {
                postAuthorsCache[comment.PostId] = await GetAuthorName(comment.PostId);
            }

            if (!userNamesCache.ContainsKey(comment.UserId))
            {
                userNamesCache[comment.UserId] = await GetUserName(comment.UserId);
            }
        }
    }

    private async Task<string> GetUserName(int userId)
    {
        if (userNamesCache.ContainsKey(userId))
        {
            return userNamesCache[userId];
        }

        try
        {
            var user = await HttpUserService.GetSingleAsync(userId);
            var userName = user?.UserName ?? "Unknown";
            userNamesCache[userId] = userName;
            return userName;
        }
        catch
        {
            return "Unknown";
        }
    }

    private async Task<string> GetAuthorName(int postId)
    {
        if (postAuthorsCache.ContainsKey(postId))
        {
            return postAuthorsCache[postId];
        }

        try
        {
            var post = await HttpPostService.GetSingleAsync(postId);
            var authorName = await GetUserName(post.UserId);
            postAuthorsCache[postId] = authorName;
            return authorName;
        }
        catch
        {
            return "Unknown";
        }
    }

    private void EditComment(CommentDto comment)
    {
        isEditing = true;
        editCommentId = comment.Id;
        editContent = comment.Content;
    }

    private async Task UpdateComment()
    {
        try
        {
            var updatedComment = new UpdateCommentDto
            {
                Id = editCommentId,
                Content = editContent
            };

            await HttpCommentService.UpdateCommentAsync(editCommentId, updatedComment);

            // Refresh comments list
            await LoadComments();
            await PreloadAuthorAndUserNames();
            CancelEdit();
        }
        catch (Exception e)
        {
            errorMessage = $"Error updating comment: {e.Message}";
        }
    }

    private void CancelEdit()
    {
        isEditing = false;
        editCommentId = 0;
        editContent = string.Empty;
    }

    private async Task DeleteComment(int commentId)
    {
        try
        {
            await HttpCommentService.DeleteCommentAsync(commentId);
            await LoadComments();
            await PreloadAuthorAndUserNames();
        }
        catch (Exception e)
        {
            errorMessage = $"Error deleting comment: {e.Message}";
        }
    }
}
